Паттерн Адаптер (Adapter) предназначен для преобразования интерфейса одного класса в интерфейс другого. 
Благодаря реализации данного паттерна мы можем использовать вместе классы с несовместимыми интерфейсами.

Когда надо использовать Адаптер?

    Когда необходимо использовать имеющийся класс, но его интерфейс не соответствует потребностям

    Когда надо использовать уже существующий класс совместно с другими классами, интерфейсы которых не совместимы

---------------------------------------------------------------------------------------------------
class Client
{
    public void Request(Target target)
    {
        target.Request();
    }
}
// класс, к которому надо адаптировать другой класс   
class Target
{
    public void Request()
    {}
}
  
// Адаптер
class Adapter : Target
{
    private Adaptee adaptee = new Adaptee();
  
    public override void Request()
    {
        adaptee.SpecificRequest();
    }
}
  
// Адаптируемый класс
class Adaptee
{
    public void SpecificRequest()
    {}
}
---------------------------------------------------------------------------------------------------

Участники

    Target: представляет объекты, которые используются клиентом

    Client: использует объекты Target для реализации своих задач

    Adaptee: представляет адаптируемый класс, который мы хотели бы использовать у клиента вместо объектов Target

    Adapter: собственно адаптер, который позволяет работать с объектами Adaptee как с объектами Target.

То есть клиент ничего не знает об Adaptee, он знает и использует только объекты Target. И благодаря адаптеру мы можем на клиенте использовать объекты Adaptee как Target
-----------------------------------------------------
Данный паттерн полностью соответствует своему названию. 
Чтобы заставить работать «советскую» вилку через евро-розетку требуется переходник. 
Именно это и делает «адаптер», служит промежуточным объектом между двумя другими, которые не могут работать напрямую друг с другом.