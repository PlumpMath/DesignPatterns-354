Паттерн Заместитель (Proxy) предоставляет объект-заместитель, который управляет доступом к другому объекту. 
То есть создается объект-суррогат, который может выступать в роли другого объекта и замещать его.

Когда использовать прокси?

    Когда надо осуществлять взаимодействие по сети, а объект-проси должен имитировать поведения объекта в другом адресном пространстве. 
	Использование прокси позволяет снизить накладные издержки при передачи данных через сеть. Подобная ситуация еще называется удалённый заместитель (remote proxies)

    Когда нужно управлять доступом к ресурсу, создание которого требует больших затрат. Реальный объект создается только тогда, когда он действительно может понадобится, 
	а до этого все запросы к нему обрабатывает прокси-объект. Подобная ситуация еще называется виртуальный заместитель (virtual proxies)

    Когда необходимо разграничить доступ к вызываемому объекту в зависимости от прав вызывающего объекта.
	 Подобная ситуация еще называется защищающий заместитель (protection proxies)

    Когда нужно вести подсчет ссылок на объект или обеспечить потокобезопасную работу с реальным объектом. Подобная ситуация называется "умные ссылки" (smart reference)


-----------------------------------------------------------------------------
class Client
{
    void Main()
    {
        Subject subject = new Proxy();
        subject.Request();
    }
}
abstract class Subject
{
    public abstract void Request();
}
 
class RealSubject : Subject
{
    public override void Request()
    {}
}
class Proxy : Subject
{
    RealSubject realSubject;
    public override void Request()
    {
        if (realSubject == null)
            realSubject = new RealSubject();
        realSubject.Request();
    }
}
-----------------------------------------------------------------------------
Участники паттерна

    Subject: определяет общий интерфейс для Proxy и RealSubject. Поэтому Proxy может использоваться вместо RealSubject

    RealSubject: представляет реальный объект, для которого создается прокси

    Proxy: заместитель реального объекта. Хранит ссылку на реальный объект, контролирует к нему доступ, может управлять его созданием и удалением. 
	При необходимости Proxy переадресует запросы объекту RealSubject

    Client: использует объект Proxy для доступа к объекту RealSubject
-------------------------------------------------
Итак, здесь определен общий интерфейс IBook для реального объекта и для его прокси-класса. Он определяет один метод GetPage() для получения страницы по номеру.

Реальный объект BookStore использует контекст данных для извлечения информации о странице из базы данных. Действие же прокси-класса отличается. 
Прокси определяет дополнительный объект - список pages. При получении страницы прокси сначала смотрит в этот список, 
и если там страницы не окажется, то идет обращение к реальному объекту BookStore и его методу. То есть фактически будет реализована функциональность кэша страниц.

Клиент, в роли которого в данном случае выступает класс Program, вообще не будет знать, использует ли он функционал класса BookStore или его прокси.

В то же время паттерн Прокси имеет недостаток: поскольку иногда будет выполняться сначала функционал прокси, 
а потом функционал реального объекта, например, если страницы не окажется в списке-кэше, то это может привести к замедлению выполнения программы.
---------------------------------------------------------------------------------
Данный паттерн позволяет создавать какие-либо специальные механизмы доступа к объекту, что чаще всего направлено именно на улучшение производительности отдельных частей программы. 
В реальной жизни можно привести следующий пример: сотрудникам одного из подразделений фирмы регулярно требуется получать информацию о том, 
какого числа бухгалтерия планирует выплатить зарплату. С одной стороны каждый из них может индивидуально и регулярно ездить в бухгалтерию для выяснения этого вопроса 
(полагаю такая ситуация нередко встречается во многих организациях). С другой стороны, при приближении планируемой даты подразделение может выбрать одного человека, 
который будет выяснять эту информацию у бухгалтерии, а в последствии уже все в подразделении могут выяснить эту информацию у него (что значительно быстрее). 
Вот именно этот человек и будет реализованным «прокси» паттерном, который будет предоставлять специальный механизм доступа к информации из бухгалтерии.