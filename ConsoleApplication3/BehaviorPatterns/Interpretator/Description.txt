Паттерн Интерпретатор (Interpreter) определяет представление грамматики для заданного языка и интерпретатор предложений этого языка. 
Как правило, данный шаблон проектирования применяется для часто повторяющихся операций.

Хотя паттерн требует понимания теории формальных языков и грамматик, на самом деле он не так сложен в понимании.

-------------------------------------------------------------------------------------
class Client
{
    void Main()
    {
        Context context = new Context();
 
        var expression = new NonterminalExpression();
        expression.Interpret(context);
 
    }
}
 
class Context
{
}
 
abstract class AbstractExpression
{
    public abstract void Interpret(Context context);
}
 
class TerminalExpression : AbstractExpression
{
    public override void Interpret(Context context)
    {
    }
}
 
class NonterminalExpression : AbstractExpression
{
    AbstractExpression expression1;
    AbstractExpression expression2;
    public override void Interpret(Context context)
    {
             
    }
}
-------------------------------------------------------------------------------------
Участники

    AbstractExpression: определяет интерфейс выражения, объявляет метод Interpret()

    TerminalExpression: терминальное выражение, реализует метод Interpret() для терминальных символов грамматики. 
	Для каждого символа грамматики создается свой объект TerminalExpression
	>>>Терминал (терминальный символ) — объект, непосредственно присутствующий в словах языка, соответствующего грамматике, 
	>>>и имеющий конкретное, неизменяемое значение (обобщение понятия «буквы»)

    NonterminalExpression: нетерминальное выражение, представляет правило грамматики. 
	Для каждого отдельного правила грамматики создается свой объект NonterminalExpression.
	>>>Нетерминал (нетерминальный символ) — объект, обозначающий какую-либо сущность языка 
	>>>(например: формула, арифметическое выражение, команда) и не имеющий конкретного символьного значения.

    Context: содержит общую для интерпретатора информацию. Может использоваться объектами терминальных и нетерминальных выражений 
	для сохранения состояния операций и последующего доступа к сохраненному состоянию

    Client: строит предложения языка с данной грамматикой в виде абстрактного синтаксического дерева, 
	узлами которого являются объекты TerminalExpression и NonterminalExpression
----------------
Методы Interpret в нетерминальных выражениях позволяют реализовать правила грамматики. 
При этом мы легко может добавить новые правила грамматики, определив новые объекты NonterminalExpression со 
своей реализацией метода Interpret. Однако данный паттерн подходит только для тех случаев, когда правила грамматики относительно простые. 
В более сложных случаях следует выбирать другие способы проектирования приложения.

----------------------------------------------------------------------------------

Сравнить данный паттерн можно с тем, как вы закладываете часто используемые действия в сокращенный набор слов, чтобы сам «интерпретатор»
 потом превратил этот набор в более комплексные осмысленные действия. По сути каждый человек постоянно является «интерпретатором». 
 отите провести жизненный эксперимент? Если из дома выходит кто-то из вашей семьи (муж, жена, ребенок), скажите ему простой набор слов «Литр молока, половинку белого, 
 200 грамм творога». По сути вы ничего особенного не сказали, лишь перечислили набор продуктов, однако велик шанс того, что «интерпретатор» транслирует это в команду 
 «зайди по дороге в продуктовый магазин и купи следующее … и принеси это домой». Паттерн «интерпретатор» призван сократить часто исполняемые действия в более короткое их описание.