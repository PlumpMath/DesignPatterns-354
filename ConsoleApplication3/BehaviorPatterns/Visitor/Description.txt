Паттерн Посетитель (Visitor) позволяет определить операцию для объектов других классов без изменения этих классов.

При использовании паттерна Посетитель определяются две иерархии классов: одна для элементов, для которых надо определить новую операцию, 
и вторая иерархия для посетителей, описывающих данную операцию.


Когда использовать данный паттерн?

    Когда имеется много объектов разнородных классов с разными интерфейсами, и требуется выполнить ряд операций над каждым из этих объектов

    Когда классам необходимо добавить одинаковый набор операций без изменения этих классов

    Когда часто добавляются новые операции к классам, при этом общая структура классов стабильна и практически не изменяется

--------------------------------------------------------------------------
class Client
{
    void Main()
    {
        var structure = new ObjectStructure();
        structure.Add(new ElementA());
        structure.Add(new ElementB());
        structure.Accept(new ConcreteVisitor1());
        structure.Accept(new ConcreteVisitor2());
    }
}
 
abstract class Visitor
{
    public abstract void VisitElementA(ElementA elemA);
    public abstract void VisitElementB(ElementB elemB);
}
 
class ConcreteVisitor1 : Visitor
{
    public override void VisitElementA(ElementA elementA)
    {
        elementA.OperationA();
    }
    public override void VisitElementB(ElementB elementB)
    {
            elementB.OperationB();
    }
}
class ConcreteVisitor2 : Visitor
{
    public override void VisitElementA(ElementA elementA)
    {
        elementA.OperationA();
    }
    public override void VisitElementB(ElementB elementB)
    {
        elementB.OperationB();
    }
}
 
class ObjectStructure
{
    List<Element> elements = new List<Element>();
    public void Add(Element element)
    {
        elements.Add(element);
    }
    public void Remove(Element element)
    {
        elements.Remove(element);
    }
    public void Accept(Visitor visitor)
    {
        foreach (Element element in elements)
            element.Accept(visitor);
    }
}
 
abstract class Element
{
    public abstract void Accept(Visitor visitor);
    public string SomeState { get; set; }
}
 
class ElementA : Element
{
    public override void Accept(Visitor visitor)
    {
        visitor.VisitElementA(this);
    }
    public void OperationA()
    { }
}
 
class ElementB : Element
{
    public override void Accept(Visitor visitor)
    {
        visitor.VisitElementB(this);
    }
    public void OperationB()
    { }
}
--------------------------------------------------------------------------
Участники

    Visitor: интерфейс посетителя, который определяет метод Visit() для каждого объекта Element

    ConcreteVisitor1 / ConcreteVisitor2: конкретные классы посетителей, реализуют интерфейс, определенный в Visitor.

    Element: определяет метод Accept(), в котором в качестве параметра принимается объект Visitor

    ElementA / ElementB: конкретные элементы, которые реализуют метод Accept()

    ObjectStructure: некоторая структура, которая хранит объекты Element и предоставляет к ним доступ. Это могут быть и простые списки, и сложные составные структуры в виде деревьев
--------------------------------------------------------------------------
Сущность работы паттерна состоит в том, что вначале создает объект посетителя, который обходит или посещает все элементы в структуре ObjectStructure, у которой вызывается метод Accept():
public void Accept(Visitor visitor)
{
    foreach (Element element in elements)
                element.Accept(visitor);
}

При посещении каждого элемента посещаемый элемент вызывает у посетителя метод, соответствующий данному элементу:
public override void Accept(Visitor visitor)
{
    visitor.VisitElementA(this);
}

В этот метод элемент передает ссылку на себя, чтобы посетитель мог получить доступ к состоянию элемента. 
А в самом посетителе уже могут вызываться методы элемента или производиться различные действия над элементом:
public override void VisitElementA(ElementA elementA)
{
    elementA.OperationA();
}

Данная техника еще называется двойной диспетчеризацией (double dispatch), 
когда выполнение операции зависит от имени запроса и двух типов получателей (объект Visitor и объект Element).

--------------------------------------------------------------------------------

Данный паттерн можно сравнить с прохождением обследования в больнице. Однако «посетителем» в терминах паттернов здесь будут сами врачи. Чтобы было понятнее: 
у нас есть больной которого требуется обследовать и полечить, но так как за разные обследования отвечают разные врачи, то мы просто присылаем к больному врачей 
в качестве «посетителей». Правило взаимодействия для больного очень простое «пригласите врача (посетителя) чтобы он сделал свою работу», а врач («посетитель») приходит, 
обследует и делает всё необходимое. Таким образом следуя простым правилам можно использовать врачей для разных больных по одним и тем же алгоритмам. Как уже было сказано, 
паттерном «посетитель» в данном случае является врач, который может одинаково обслуживать разные объекты (больных) если его позовут.