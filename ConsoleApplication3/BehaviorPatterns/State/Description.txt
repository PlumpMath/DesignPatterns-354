Состояние (State) - шаблон проектирования, который позволяет объекту изменять свое поведение в зависимости от внутреннего состояния.

Когда применяется данный паттерн?

    Когда поведение объекта должно зависеть от его состояния и может изменяться динамически во время выполнения

    Когда в коде методов объекта используются многочисленные условные конструкции, выбор которых зависит от текущего состояния объекта

----------------------------------------------------------------------
class Program
{
    static void Main()
    {
        Context context = new Context(new StateA());
        context.Request();
        context.State = new StateB();
        context.Request();
    }
}
abstract class State
{
    public abstract void Handle(Context context);
}
class StateA : State
{
    public override void Handle(Context context)
    {
        context.State = new StateB();
    }
}
class StateB : State
{
    public override void Handle(Context context)
    { 
        context.State = new StateA();
    }
}
 
class Context
{
    public State State { get; set; }
    public Context(State state)
    {
        this.State = state;
    }
    public void Request()
    {
        this.State.Handle(this);
    }
}
----------------------------------------------------------------------
Участники паттерна

    State: определяет интерфейс состояния

    Классы StateA и StateB - конкретные реализации состояний

    Context: представляет объект, поведение которого должно динамически изменяться в соответствии с состоянием. 
	Выполнение же конкретных действий делегируется объекту состояния

------------
Таким образом, реализация паттерна Состояние позволяет вынести поведение, зависящее от текущего состояния объекта, 
в отдельные классы, и избежать перегруженности методов объекта условными конструкциями, как if..else или switch. 
Кроме того, при необходимости мы можем ввести в систему новые классы состояний, а имеющиеся классы состояний использовать в других объектах.

---------------------------------------------------------------------

В реальной жизни каждый человек может прибывать в разных состояниях. Точно также порой требуется чтобы объекты в программе вели себя по разному в зависимости от каких-либо 
их внутренних состояний. По аналогии с реальной жизнью можно например привести следующий пример:
Если вы устали то на фразу «Сходи в магазин» вы будете выдавать «Не пойду», если вам нужно сходить в магазин (за пивом?), то на «Сходи в магазин» вы будете выдавать «Уже бегу!». 
Человек (объект) один и тот же, а поведение разное. Именно для этих целей и используют паттерн «состояние».