Паттерн "Наблюдатель" (Observer) представляет поведенческий шаблон проектирования, который использует отношение "один ко многим". 
В этом отношении есть один наблюдаемый объект и множество наблюдателей. И при изменении наблюдаемого объекта автоматически 
происходит оповещение всех наблюдателей.

Данный паттерн еще называют Publisher-Subscriber (издатель-подписчик), поскольку отношения издателя и подписчиков 
характеризуют действие данного паттерна: подписчики подписываются email-рассылку определенного сайта. 
Сайт-издатель с помощью email-рассылки уведомляет всех подписчиков о изменениях. А подписчики получают изменения и производят 
определенные действия: могут зайти на сайт, могут проигнорировать уведомления и т.д.

Когда использовать паттерн Наблюдатель?

    Когда система состоит из множества классов, объекты которых должны находиться в согласованных состояниях

    Когда общая схема взаимодействия объектов предполагает две стороны: одна рассылает сообщения и является главным, 
	другая получает сообщения и реагирует на них. Отделение логики обеих сторон позволяет их рассматривать независимо и 
	использовать отдельно друга от друга.

    Когда существует один объект, рассылающий сообщения, и множество подписчиков, которые получают сообщения. 
	При этом точное число подписчиков заранее неизвестно и процессе работы программы может изменяться.

-----------------------------------------------------------------------------------
interface IObservable
{
    void AddObserver(IObserver o);
    void RemoveObserver(IObserver o);
    void NotifyObservers();
}
class ConcreteObservable : IObservable
{
    private List<IObserver> observers;
    public void AddObserver(IObserver o)
    {
        observers.Add(o);
    }
 
    public void RemoveObserver(IObserver o)
    {
        observers.Remove(o);
    }
 
    public void NotifyObservers()
    {
        foreach (IObserver observer in observers)
            observer.Update();
    }
}
 
interface IObserver
{
    void Update();
}
class ConcreteObserver :IObserver
{
    public void Update()
    {
    }
}
-----------------------------------------------------------------------------------

Участники

    IObservable: представляет наблюдаемый объект. Определяет три метода: AddObserver() (для добавления наблюдателя), RemoveObserver() 
	(удаление набюдателя) и NotifyObservers() (уведомление наблюдателей)

    ConcreteObservable: конкретная реализация интерфейса IObservable. Определяет коллекцию объектов наблюдателей.

    IObserver: представляет наблюдателя, который подписывается на все уведомления наблюдаемого объекта. Определяет метод Update(), 
	который вызывается наблюдаемым объектом для уведомления наблюдателя.

    ConcreteObserver: конкретная реализация интерфейса IObserver.

--------------------------
одним из вариантом информирования наблюдателя о состоянии является push-модель, при которой наблюдаемый объект 
передает (иначе говоря толкает - push) данные о своем состоянии, то есть передаем в виде параметра метода Update().

Альтернативой push-модели является pull-модель, когда наблюдатель вытягивает (pull) из наблюдаемого объекта данные о состоянии с 
помощью дополнительных методов.