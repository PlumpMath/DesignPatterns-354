Паттерн "Наблюдатель" (Observer) представляет поведенческий шаблон проектирования, который использует отношение "один ко многим". 
В этом отношении есть один наблюдаемый объект и множество наблюдателей. И при изменении наблюдаемого объекта автоматически 
происходит оповещение всех наблюдателей.

Данный паттерн еще называют Publisher-Subscriber (издатель-подписчик), поскольку отношения издателя и подписчиков 
характеризуют действие данного паттерна: подписчики подписываются email-рассылку определенного сайта. 
Сайт-издатель с помощью email-рассылки уведомляет всех подписчиков о изменениях. А подписчики получают изменения и производят 
определенные действия: могут зайти на сайт, могут проигнорировать уведомления и т.д.

Когда использовать паттерн Наблюдатель?

    Когда система состоит из множества классов, объекты которых должны находиться в согласованных состояниях

    Когда общая схема взаимодействия объектов предполагает две стороны: одна рассылает сообщения и является главным, 
	другая получает сообщения и реагирует на них. Отделение логики обеих сторон позволяет их рассматривать независимо и 
	использовать отдельно друга от друга.

    Когда существует один объект, рассылающий сообщения, и множество подписчиков, которые получают сообщения. 
	При этом точное число подписчиков заранее неизвестно и процессе работы программы может изменяться.

-----------------------------------------------------------------------------------
interface IObservable
{
    void AddObserver(IObserver o);
    void RemoveObserver(IObserver o);
    void NotifyObservers();
}
class ConcreteObservable : IObservable
{
    private List<IObserver> observers;
    public void AddObserver(IObserver o)
    {
        observers.Add(o);
    }
 
    public void RemoveObserver(IObserver o)
    {
        observers.Remove(o);
    }
 
    public void NotifyObservers()
    {
        foreach (IObserver observer in observers)
            observer.Update();
    }
}
 
interface IObserver
{
    void Update();
}
class ConcreteObserver :IObserver
{
    public void Update()
    {
    }
}
-----------------------------------------------------------------------------------

Участники

    IObservable: представляет наблюдаемый объект. Определяет три метода: AddObserver() (для добавления наблюдателя), RemoveObserver() 
	(удаление набюдателя) и NotifyObservers() (уведомление наблюдателей)

    ConcreteObservable: конкретная реализация интерфейса IObservable. Определяет коллекцию объектов наблюдателей.

    IObserver: представляет наблюдателя, который подписывается на все уведомления наблюдаемого объекта. Определяет метод Update(), 
	который вызывается наблюдаемым объектом для уведомления наблюдателя.

    ConcreteObserver: конкретная реализация интерфейса IObserver.

--------------------------
одним из вариантом информирования наблюдателя о состоянии является push-модель, при которой наблюдаемый объект 
передает (иначе говоря толкает - push) данные о своем состоянии, то есть передаем в виде параметра метода Update().

Альтернативой push-модели является pull-модель, когда наблюдатель вытягивает (pull) из наблюдаемого объекта данные о состоянии с 
помощью дополнительных методов.

---------------------------------------------------
Publisher-Subscriber в реализации Microsoft основывается на event:

 class Program
{
    public event EventHandler<CustomEventArgs> CustomEvent;

    static void Main(string[] args)
    {
        var pub = new Publisher();
        var sub1 = new Subscriber("sub1", pub);
        var sub2 = new Subscriber("sub2", pub);

        // Call the method that raises the event.
        pub.DoSomething();

        // Keep the console window open
        Console.WriteLine("Press Enter to close this window.");
        Console.ReadKey();
    }
}

// Class that publishes an event
class Publisher
{
    // Declare the event using EventHandler<T>
    public event EventHandler<CustomEventArgs> RaiseCustomEvent;

    public void DoSomething()
    {
        // Write some code that does something useful here
        // then raise the event. You can also raise an event
        // before you execute a block of code.
        OnRaiseCustomEvent(new CustomEventArgs("Did something"));
    }

    // Wrap event invocations inside a protected virtual method
    // to allow derived classes to override the event invocation behavior
    protected virtual void OnRaiseCustomEvent(CustomEventArgs e)
    {
        // Make a temporary copy of the event to avoid possibility of
        // a race condition if the last subscriber unsubscribes
        // immediately after the null check and before the event is raised.
        EventHandler<CustomEventArgs> handler = RaiseCustomEvent;

        // Event will be null if there are no subscribers
        if (handler != null)
        {
            // Format the string to send inside the CustomEventArgs parameter
            e.Message += String.Format(" at {0}", DateTime.Now.ToString());

            // Use the () operator to raise the event.
            handler(this, e);
        }
    }
}

//Class that subscribes to an event
class Subscriber
{
    private string id;
    public Subscriber(string ID, Publisher pub)
    {
        id = ID;
        // Subscribe to the event using C# 2.0 syntax
        pub.RaiseCustomEvent += HandleCustomEvent;
    }

    // Define what actions to take when the event is raised.
    void HandleCustomEvent(object sender, CustomEventArgs e)
    {
        Console.WriteLine(id + " received this message: {0}", e.Message);
    }
}

// Define a class to hold custom event info
public class CustomEventArgs : EventArgs
{
    public CustomEventArgs(string s)
    {
        message = s;
    }
    private string message;

    public string Message
    {
        get { return message; }
        set { message = value; }
    }
}

Данный подход имеет проблему в том, что на одно событие класса Publisher подписываются разные подписчики. 
Если один из подписчиков сгенерирует exception, то все остальные подписчики, которые находятся после него, 
не получат уведомление, которое они ожидали. Решение данной проблемы основано на использовании метода Delegate.GetInvocationList 
(для событий другого решения нет), который возвращает массив делегатов, представляющих список вызовов текущего делегата. И тут на
помощь приходит Наблюдатель 

----------------------------------------------------------------------------------

Очень распространенный паттерн в реальной жизни. Например если вы подписались на какую-либо email (или смс) рассылку, то ваш email (или номер сотового телефона) 
начинает реализовывать паттерн «наблюдатель». Как только вы подписываетесь на событие (например новая статья или сообщение), всем кто подписан на это событие (наблюдателям) 
будет выслано уведомление, а они уже в свою очередь могут выбрать как на это сообщение реагировать.