Цепочка Обязанностей (Chain of responsibility) - поведенческий шаблон проектирования, 
который позволяет избежать жесткой привязки отправителя запроса к получателю, позволяя нескольким объектам обработать запрос. 
Все возможные обработчики запроса образуют цепочку, а сам запрос перемещается по этой цепочке, пока один из ее объектов не обработает запрос. 
Каждый объект при получении запроса выбирает, либо обработать запрос, либо передать выполнение запроса следующему по цепочке.

Когда применяется цепочка обязанностей?

    Когда имеется более одного объекта, который может обработать определенный запрос

    Когда надо передать запрос на выполнение одному из нескольких объект, точно не определяя, какому именно объекту

    Когда набор объектов задается динамически

---------------------------------------------------------------------------------
class Client
{
    void Main()
    {
        Handler h1 = new ConcreteHandler1();
        Handler h2 = new ConcreteHandler2();
        h1.Successor = h2;
        h1.HandleRequest(2);
    }
}
abstract class Handler
{
    public Handler Successor { get; set; }
    public abstract void HandleRequest(int condition);
}
 
class ConcreteHandler1 : Handler
{
    public override void HandleRequest(int condition)
    {
        if (condition == 1)
        {
            // обработка;
        }
        else if (Successor != null)
        {
            Successor.HandleRequest(condition);
        }
    }
}
 
class ConcreteHandler2 : Handler
{
    public override void HandleRequest(int condition)
    {
        if (condition==2)
        {
            // обработка;
        }
        else if (Successor != null)
        {
            Successor.HandleRequest(condition);
        }
    }
}
---------------------------------------------------------------------------------
Участники

    Handler: определяет интерфейс для обработки запроса. Также может определять ссылку на следующий обработчик запроса

    ConcreteHandler1 и ConcreteHandler2: конкретные обработчики, которые реализуют функционал для обработки запроса. 
	При невозможности обработки и наличия ссылки на следующий обработчик, передают запрос этому обработчику

    В данном случае для простоты примера в качестве параметра передается некоторое число, и в зависимости от значения данного 
	числа обработчики и принимают решения об обработке запроса.

    Client: отправляет запрос объекту Handler
----------------
Использование цепочки обязанностей дает нам следующие преимущества:

    Ослабление связанности между объектами. Отправителю и получателю запроса ничего не известно друг о друге. 
	Клиенту неизветна цепочка объектов, какие именно объекты составляют ее, как запрос в ней передается.

    В цепочку с легкостью можно добавлять новые типы объектов, которые реализуют общий интерфейс.

------
В то же время у паттерна есть недостаток: никто не гарантирует, что запрос в конечном счете будет обработан. 
Если необходимого обработчика в цепочки не оказалось, то запрос просто выходит из цепочки и остается необработанным.

Использование паттерна довольно часто встречается в нашей жизни. Достаточно распространена ситуация, когда чиновники перекладывают 
друг на друга по цепочке выполнения какого-нибудь дела, и оно в конце концов оказывается не выполненным. 
Или когда мы идем в поликлинику, но при этом точно не знаем характер заболевания. В этом случае мы идем к терапевту, 
а он в зависимости от заболевания уже может либо сам лечить, либо отправить на лечение другим специализированным врачам.

-----------------------
преимуществом цепочки является и то, что она позволяет расположить последовательность объектов-обработчиков 
в ней в зависимости от их приоритета.