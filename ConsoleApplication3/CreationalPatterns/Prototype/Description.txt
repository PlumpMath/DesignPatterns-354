Паттерн Прототип (Prototype) позволяет создавать объекты на основе уже ранее созданных объектов-прототипов. 
То есть по сути данный паттерн предлагает технику клонирования объектов.

Когда использовать Прототип?

    Когда конкретный тип создаваемого объекта должен определяться динамически во время выполнения

    Когда нежелательно создание отдельной иерархии классов фабрик для создания объектов-продуктов из параллельной 
	иерархии классов (как это делается, например, при использовании паттерна Абстрактная фабрика)

    Когда клонирование объекта является более предпочтительным вариантом нежели его создание и инициализация с помощью конструктора. 
	Особенно когда известно, что объект может принимать небольшое ограниченное число возможных состояний.

-----------------------------------------------------------------------------------------
class Client
{
    void Operation()
    {
        Prototype prototype = new ConcretePrototype1(1);
        Prototype clone = prototype.Clone();
        prototype = new ConcretePrototype2(2);
        clone = prototype.Clone();
    }
}
 
abstract class Prototype
{
    public int Id { get; private set; }
    public Prototype(int id)
    {
        this.Id = id;
    }
    public abstract Prototype Clone();
}
 
class ConcretePrototype1 : Prototype
{
    public ConcretePrototype1(int id)
        : base(id)
    { }
    public override Prototype Clone()
    {
        return new ConcretePrototype1(Id);
    }
}
 
class ConcretePrototype2 : Prototype
{
    public ConcretePrototype2(int id)
        : base(id)
    { }
    public override Prototype Clone()
    {
        return new ConcretePrototype2(Id);
    }
}
-----------------------------------------------------------------------------------------

Участники

    Prototype: определяет интерфейс для клонирования самого себя, который, как правило, представляет метод Clone()

    ConcretePrototype1 и ConcretePrototype2: конкретные реализации прототипа. Реализуют метод Clone()

    Client: создает объекты прототипов с помощью метода Clone()

----------------
Example:
клонирование на примере фигур - прямоугольников и кругов


Чтобы вручную не создавать у клонированного объекта вложенный объект Point, 
здесь используются механизмы бинарной сериализации. И в этом случае все классы, объекты которых подлежат копированию, 
должны быть помечены атрибутом Serializable



*
Существуют многочисленные способы реализации операции глубокую копию. Ниже перечислены некоторые из них:

    Вызовите конструктор класса объекта для копирования для создания второго объекта значениями свойств из первого объекта. 
	При этом предполагается, что значения объекта полностью определяется его конструктору класса.

    Вызовите MemberwiseClone способ создания Неполная копия объекта, а затем назначить новые объекты, 
	значения которых совпадают с исходным объектом, чтобы любые свойства или поля, значения которого являются ссылочными типами. 

    Сериализовать объект для получения его глубокой копии, а затем восстановить сериализованные данные в другую объектную переменную.

    Используйте отражение с рекурсии для выполнения операции глубокую копию. 
