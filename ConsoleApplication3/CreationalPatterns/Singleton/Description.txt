Одиночка (Singleton, Синглтон) - порождающий паттерн, который гарантирует, что для определенного класса будет 
создан только один объект, а также предоставит к этому объекту точку доступа.

Когда надо использовать Синглтон? 

Когда необходимо, чтобы для класса существовал только один экземпляр

Синглтон позволяет создать объект только при его необходимости. Если объект не нужен, то он не будет создан. 
В этом отличие синглтона от глобальных переменных.

В классе определяется статическая переменная - ссылка на конкретный экземпляр данного объекта и приватный конструктор. 
В статическом методе getInstance() этот конструктор вызывается для создания объекта, если, конечно, 
объект отсутствует и равен null.
------------------------------------------------------
Один из самых известных и, пожалуй, самых спорных паттернов.
Представьте, что в городе требуется организовать связь между жителями. С одной стороны мы можем связать всех жителей между собой протянув между ними кабели телефонных линий, 
но полагаю вы понимаете насколько такая система неверна. Например, как затратно будет добавить еще одного жителя в связи (протянуть по еще одной линии к каждому жителю). 
Чтобы этого избежать, мы создаем телефонную станцию, которая и будет нашим «одиночкой». Она одна, всегда, и если кому-то потребуется связаться с кем-то, 
то он может это сделать через данную телефонную станцию, потому что все обращаются только к ней. Соответственно для добавления нового жителя нужно будет изменить 
только записи на самой телефонной станции. Один раз создав телефонную станцию все могут пользоваться ей и только ей одной, в свою очередь эта станция помнит всё что с ней 
происходило с момента ее создания и каждый может воспользоваться этой информацией, даже если он только приехал в город.
Основной смысл «одиночки» в том, чтобы когда вы говорите «Мне нужна телефонная станция», вам бы говорили «Она уже построена там-то», а не «Давай ее сделаем заново». 
«Одиночка» всегда один.

Примечание:
Несмотря на удобство применения данного паттерна, он является одним из самых спорных при разработке и рекомендуется его применять только если нет никакого другого способа решения, 
потому как это создает значительные сложности при тестировании кода, однако это уже отдельная тема.